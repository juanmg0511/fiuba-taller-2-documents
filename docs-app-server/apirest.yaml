openapi: "3.0.0"
info:
  title: Chotuve API Reference
  version: 1.0.0
servers:
  - url: https://choutuve-app-server.herokuapp.com/
    description: App Server
paths:
  /:
    get:
      summary: Home
      security: []
      operationId: home
      tags:
        - home
      responses:
        '200':
          description: OK
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            text/plain:
              schema:
                type: string
                example: Welcome to Choutuve Application Server API (V1)!

  /ping:
    get:
      summary: Returns a ping message from server
      security: []
      operationId: ping
      tags:
        - ping
      responses:
        '200':
          description: OK
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            text/plain:
              schema:
                type: string
                example: Pong!
  /status:
    get:
      summary: Returns satus information from server
      security: []
      operationId: status
      tags:
        - status
      responses:
        '200':
          description: OK
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
              example:
                code: 0
                message: fiuba-taller-2-app-server
                'data:':
                  server_status: online
                  database_status: online
  /stats:
    get:
      summary: Returns usage statistics from server
      operationId: stats
      tags:
        - stats
      responses:
        '501':
          description: Not implemented
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: -1
                message: "TBD, coming soon!"
                data: {}
  /users:
    get:      
      summary: Get all users
      operationId: getUsers
      tags:
        - users
      responses:
        '200':
          description: An array of users
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Users"
              example:
              - id: 5eb72ba5d2824353b87e5e94
                username: testuser
                first_name: Test
                last_name: User
                contact:
                  email: testuser@example.com
                  phone: +54 11 5555 5555
                avatar:
                  url: 'http://www.google.com/'
                date_created: '2020-05-09T22:16:05.458187'
                date_updated: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
    post:
      summary: Create a user
      security: []
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  
      responses:
        '201':
          description: "New user created"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad request: missing required arguments (-1) / bad argument format, contact (-2), bad argument format, avatar (-3)/ user already exists (-4)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:            
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
  /users/{userName}:
    get:
      summary: Get user
      operationId: getUser
      tags:
        - users
      parameters:
        - name: userName
          in: path
          required: true
          description: The username of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A user
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Users"
              example:
                id: 5eb72ba5d2824353b87e5e94
                username: testuser
                first_name: Test
                last_name: User
                contact:
                  email: testuser@example.com
                  phone: +54 11 5555 5555
                avatar:
                  url: 'http://www.google.com/'
                date_created: '2020-05-09T22:16:05.458187'
                date_updated: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Admin user testuser not found.
                data: null
    put:
      summary: Update user
      operationId: putUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut' 
      parameters:
        - name: userName
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: 5eb72ba5d2824353b87e5e94
                username: testuser
                first_name: Test
                last_name: User
                contact:
                  email: testuser@example.com
                  phone: +54 11 5555 5555
                avatar:
                  url: 'http://www.google.com/'
                date_created: '2020-05-09T22:16:05.458187'
                date_updated: '2020-05-09T22:18:05.458187'
        '400':
          description: "Bad request: missing required arguments (-1) / bad argument format, contact (-2), bad argument format, avatar (-3)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:            
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: User testuser not found.
                data: null
    patch:
      summary: Update user password
      operationId: patchUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser' 
      parameters:
        - name: userName
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: string
      responses:
        '200':
          description: User password updated
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                code: 0
                message: User testuser password updated.
                data: null              
        '400':
          description: "Bad request: missing required arguments (-1) / bad argument format, contact (-2), bad argument format, avatar (-3)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:            
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: User 'testuser' not found.
                data: null
    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: userName
          in: path
          required: true
          description: The username of the user to delete
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                code: 0
                message: User testuser deleted.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: User 'testuser' not found.
                data: null
  /adminusers:
    get:
      summary: Get all admin users
      operationId: getAdminUsers
      tags:
        - adminusers
      responses:
        '200':
          description: An array of admin users
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUsers"
              example:
              - id: 5eb72ba5d2824353b87e5e94
                username: testuser
                first_name: Test
                last_name: User
                email: testuser@example.com
                date_created: '2020-05-09T22:16:05.458187'
                date_updated: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
    post:
      summary: Create an admin user
      security: []
      operationId: createAdminUser
      tags:
        - adminusers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUser'
      responses:
        '201':
          description: "New admin user created"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUser"
        '400':
          description: "Bad request: missing required arguments (-1) / user already exists (-2)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
  /adminusers/{userName}:
    get:
      summary: Get admin user
      operationId: getAdminUser
      tags:
        - adminusers
      parameters:
        - name: userName
          in: path
          required: true
          description: The username of the admin user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: An admin user
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUsers"
              example:
                id: 5eb72ba5d2824353b87e5e94
                username: testuser
                first_name: Test
                last_name: User
                email: testuser@example.com
                date_created: '2020-05-09T22:16:05.458187'
                date_updated: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Admin user testuser not found.
                data: null
    put:
      summary: Update admin user
      operationId: putAdminUser
      tags:
        - adminusers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserPut'
      parameters:
        - name: userName
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: string
      responses:
        '200':
          description: Admin user updated
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUser"
              example:
                id: 5eb72ba5d2824353b87e5e94
                username: testuser
                first_name: Test
                last_name: User
                email: testuser@example.com
                date_created: '2020-05-09T22:16:05.458187'
                date_updated: '2020-05-09T22:18:05.458187'
        '400':
          description: "Bad request: missing required arguments (-1)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Admin user testuser not found.
                data: null
    patch:
      summary: Update admin user password
      operationId: patchAdminUser
      tags:
        - adminusers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
      parameters:
        - name: userName
          in: path
          required: true
          description: The usename of the admin user to update
          schema:
            type: string
      responses:
        '200':
          description: Admin user password updated
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                code: 0
                message: Admin user testuser password updated.
                data: null
        '400':
          description: "Bad request: missing required arguments (-1)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Admin user testuser not found.
                data: null
    delete:
      summary: Delete admin user
      operationId: deleteAdminUser
      tags:
        - adminusers
      parameters:
        - name: userName
          in: path
          required: true
          description: The id of the user to delete
          schema:
            type: string
      responses:
        '200':
          description: Admin user deleted
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                code: 0
                message: Admin user testuser deleted.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Admin user testuser not found.
                data: null
  /sessions:
    get:
      summary: Get all sessions
      operationId: getAllSessions
      tags:
        - sessions
      responses:
        '200':
          description: An array of sessions
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sessions"
              example:
              - id: 5eb8cdb1ec54d8c9b812c074
                username: chotuvegod
                session_token: d9f6c4b4-933b-11ea-9566-72ba225d89f0
                expires: '2020-05-11T05:59:45.740404'
                date_created: '2020-05-11T03:59:45.740445'
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
    post:
      summary: Create a session
      security: []
      operationId: createSessions
      tags:
        - sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUser'
      responses:
        '201':
          description: New session created
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        '400':
          description: "Bad request: missing required arguments"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: "Access error: invalid API key (-1) / wrong username or password (-2)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: "No session with token d9f6c4b4-933b-11ea-9566-72ba225d89f0 was found."
                data: null
  /sessions/{token}:
    get:
      summary: Get session
      operationId: getSession
      tags:
        - sessions
      parameters:
        - name: token
          in: path
          required: true
          description: The token of the session to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A session
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
              example:
                id: 5eb8cdb1ec54d8c9b812c074
                username: chotuvegod
                session_token: d9f6c4b4-933b-11ea-9566-72ba225d89f0
                expires: '2020-05-11T05:59:45.740404'
                date_created: '2020-05-11T03:59:45.740445'
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: "No session with token d9f6c4b4-933b-11ea-9566-72ba225d89f0 was found."
                data: null
    delete:
      summary: Delete session
      operationId: deleteSession
      tags:
        - sessions
      parameters:
        - name: token
          in: path
          required: true
          description: The token of the session to delete
          schema:
            type: string
      responses:
        '200':
          description: Session deleted
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                code: 0
                message: Session with token 'd9f6c4b4-933b-11ea-9566-72ba225d89f0' deleted.
                data: null
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: "No session with token 'd9f6c4b4-933b-11ea-9566-72ba225d89f0' was found."
                data: null
  /recovery:
    get:
      summary: Get all recovery requests
      operationId: getAllRecovery
      tags:
        - recovery
      responses:
        '200':
          description: An array of recovery requests
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recoveries"
              example:
              - id: 5eb8cdb1ec54d8c9b812c074
                username: chotuvegod
                recovery_key: d9f6c4b4-933b-11ea-9566-72ba225d89f0
                expires: '2020-05-11T05:59:45.740404'
                date_created: '2020-05-11T03:59:45.740445'
        '401':
          description: Access error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
    post:
      summary: Create a recovery request
      security: []
      operationId: createRecovery
      tags:
        - recovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoveryUser'
      responses:
        '201':
          description: New recovery request created (sends email to user)
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recovery"
        '400':
          description: "Bad request: missing required arguments"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: "Access error: invalid API key (-1)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: Not found error
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: User testuser not found.
                data: null
  /recovery/{userName}:
    get:
      summary: View recovery request for user
      operationId: viewRecoveryRequest
      tags:
        - recovery
      parameters:
        - name: userName
          in: path
          required: true
          description: The username of the user to recover password
          schema:
            type: string
      responses:
        '200':
          description: A recovery request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recovery"
              example:
                id: 5eb8cdb1ec54d8c9b812c074
                username: chotuvegod
                recovery_key: d9f6c4b4-933b-11ea-9566-72ba225d89f0
                expires: '2020-05-11T05:59:45.740404'
                date_created: '2020-05-11T03:59:45.740445'
        '401':
          description: Access error (-1) / Recovery key expired (-2)
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: User not found error (-1) / Recovery request not found (-2)
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: "User testuser not found."
                data: null
    post:
      summary: Reset a password
      security: []
      operationId: resetPassword
      tags:
        - recovery
      parameters:
        - name: userName
          in: path
          required: true
          description: The username of the user to recover password
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoveryPassword'
      responses:
        '200':
          description: New session created
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                code: 0
                message: "Password for user testuser was reset."
                data: null
        '400':
          description: "Bad request: missing required arguments"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: Bad request. Missing required arguments.
                data: null
        '401':
          description: "Access error: invalid API key (-1) / expired recovery key (-2) / wrong recovery key (-3)"
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: You are not authorized to access this resource.
                data: null
        '404':
          description: User not found error (-1) / Recovery request not found (-2)
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: -1
                message: "User 'username' not found."
                data: null
  /friendships:
    get:
      summary: List friendships
      operationId: getFriendships
      tags:
        - friends
      parameters:
        - name: from_user
          in: query
          required: false
          description: The id of the user who request
          schema:
            type: string
        - name: to_user
          in: query
          required: false
          description: The id of the user requested
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: The status of the friendship "pending" / "approved"
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of friendships
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Friendship"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create friendship request
      operationId: createFriendship
      tags:
        - friends
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Friendship'
      responses:
        '201':
          description: Friendship request data
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friendship"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /friendships/{friendshipId}:
    put:
      summary: Update status friendship
      operationId: updateFriendship
      tags:
        - friends
      parameters:
        - name: friendshipId
          in: path
          required: true
          description: The id of the friendship to edit
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  description: new status
                  example: approved
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete friendship
      operationId: deleteFriendship
      tags:
        - friends
      parameters:
        - name: friendshipId
          in: path
          required: true
          description: The id of the friendship to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /users/{userName}/friends:
    get:
      summary: List of friends
      operationId: getFriends
      tags:
        - friends
      parameters:
        - name: userName
          in: path
          required: true
          description: The username of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A list of user's friends
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Friend"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /videos:
    get:
      summary: List videos
      operationId: getVideos
      tags:
        - videos
      parameters:
        - name: id
          in: query
          required: false
          description: The id of the comment
          schema:
            type: string
        - name: user
          in: query
          required: false
          description: The id of the user who post the video
          schema:
            type: string
        - name: visibility
          in: query
          required: false
          description: The visibility type of the video
          example: private / public
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of videos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Video"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create new video
      operationId: postVideo
      tags:
        - videos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '201':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Video"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /videos/{videoId}:
    get:
      summary: Get video
      operationId: getVideo
      tags:
        - videos
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Video data
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Video"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    put:
      summary: Update video
      operationId: putVideo
      tags:
        - videos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video to update
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Video"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete video
      operationId: deleteVideo
      tags:
        - videos
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /videos/{videoId}/likes:
    get:
      summary: List likes
      operationId: getVideoLikes
      tags:
        - likes
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of likes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reaction"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Post like
      operationId: postVideoLike
      tags:
        - likes
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete like
      operationId: deleteVideoLike
      tags:
        - likes
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /videos/{videoId}/dislikes:
    get:
      summary: List dislikes
      operationId: getVideoDislikes
      tags:
        - dislikes
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of dislikes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reaction"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Post dislike
      operationId: postVideoDislike
      tags:
        - dislikes
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete dislike
      operationId: deleteVideoDislike
      tags:
        - dislikes
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /videos/{videoId}/views:
    get:
      summary: List views
      operationId: getVideoViews
      tags:
        - views
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of views
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reaction"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Post view
      operationId: postVideoView
      tags:
        - views
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete view
      operationId: deleteVideoView
      tags:
        - views
      parameters:
        - name: videoId
          in: path
          required: true
          description: The id of the video
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /comments:
    get:
      summary: List comments
      operationId: getComments
      tags:
        - comments
      parameters:
        - name: id
          in: query
          required: false
          description: The id of the comment
          schema:
            type: string
        - name: video
          in: query
          required: false
          description: The id of the video comments
          schema:
            type: string
        - name: parent
          in: query
          required: false
          description: The id of the parent comment
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create new comment
      operationId: postComment
      tags:
        - comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /comments/{commentId}:
    get:
      summary: Get comment
      operationId: getComment
      tags:
        - comments
      parameters:
        - name: commentId
          in: path
          required: true
          description: The id of the comment to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Comment data
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete comment
      operationId: deleteComment
      tags:
        - comments
      parameters:
        - name: commentId
          in: path
          required: true
          description: The id of the comment to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Request-ID:
              schema:
                type: string
              description: Request unique identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
components:
  securitySchemes:
    AuthToken:
      type: apiKey
      in: header
      name: X-Auth-Token
  parameters:
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 10
        maximum: 50
        default: 10
      description: The numbers of items to return.
      example: 10
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip.
      example: 0
  responses:
    BadRequest:
      description: Bad request.
      headers:
        X-Request-ID:
          schema:
            type: string
          description: Request unique identifier.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found
      headers:
        X-Request-ID:
          schema:
            type: string
          description: Request unique identifier.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      headers:
        X-Request-ID:
          schema:
            type: string
          description: Request unique identifier.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      headers:
        X-Request-ID:
          schema:
            type: string
          description: Request unique identifier.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: 5XX Server Error
      headers:
        X-Request-ID:
          schema:
            type: string
          description: Request unique identifier.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    AuthUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    PatchUser:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string
    AdminUser:
      type: object
      required:
        - username
        - password
        - first_name
        - last_name
        - email
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    AdminUserPut:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    User:
      type: object
      required:
        - username
        - password
        - first_name
        - last_name
        - contact
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
        last_name:
          type: string
        contact:
          $ref: '#/components/schemas/ContactInfo'
        avatar:
          $ref: '#/components/schemas/Picture'
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    UserPut:
      type: object
      required:
        - first_name
        - last_name
        - contact
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        contact:
          $ref: '#/components/schemas/ContactInfo'
        avatar:
          $ref: '#/components/schemas/Picture'
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    AdminUsers:
      type: array
      items:
        $ref: "#/components/schemas/AdminUser"
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Picture:
      type: object
      properties:
        url:
          type: string
    ContactInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        phone:
          type: string
    Status:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: object
          required:
            - server_status
            - database_status
          properties:
            server_status:
              type: string
              readOnly: true
            database_status:
              type: string
              readOnly: true
        data:
          type: object
    Recoveries:
      type: array
      items:
        $ref: "#/components/schemas/Recovery"
    Recovery:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        recovery_key:
          type: string
        expires:
          type: string
          format: date-time
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
    RecoveryUser:
      type: object
      required:
        - username
      properties:
        username:
          type: string
    RecoveryPassword:
      type: object
      required:
        - recovery_key
        - new_password
      properties:
        recovery_key:
          type: string
        new_password:
          type: string
    Sessions:
      type: array
      items:
        $ref: "#/components/schemas/Session"
    Session:
      type: object
      required:
        - username
        - session_token
        - expires
      properties:
        username:
          type: string
        session_token:
          type: string
        expires:
          type: string
          format: date-time
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
    Friendship:
      type: object
      required:
        - to_user
        - message
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        from_user:
          type: integer
          format: int64
          readOnly: true
        to_user:
          type: integer
          format: int64
          readOnly: false
          example: testuser
        message:
          type: string
        status:
          type: string
          readOnly: true
          example: approved
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    Friend:
      type: object
      properties:
        friendship_id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
          readOnly: true
        message:
          type: string
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    Video:
      type: object
      required:
        - media
        - visibility
      properties:
        id:
          type: string
          example: 379824269sd9382ss7
          readOnly: true
        title:
          type: string
          example: One title
        description:
          type: string
          example: One description
        visibility:
          type: string
          example: private
        media:
          $ref: '#/components/schemas/Media'
        location:
          $ref: '#/components/schemas/Location'
        count_likes:
          type: integer
          readOnly: true
          example: 0
        count_dislikes:
          type: integer
          readOnly: true
          example: 0
        count_views:
          type: integer
          readOnly: true
          example: 0
        user:
          type: string
          example: testuser
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    Comment:
      type: object
      required:
        - message
        - video
      properties:
        id:
          type: string
          example: 87593dsf73f908
          readOnly: true
        video:
          type: string
          example: 1159334tgsf73f9
        parent:
          type: string
          example: 84759334wef73f1
        message:
          type: string
          example: Que buen video!!
        user:
          type: string
          example: testuser
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    Reaction:
      type: object
      properties:
        user:
          type: string
          example: testuser
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
    Media:
      type: object
      required:
        - name
        - date_created
        - size
        - type
      properties:
        name:
          type: string
          example: 1282154_Lathe - 4412.mp4
        date_created:
          type: string
          format: date-time
          example: 2020-05-30T02:36:53.074000
        size:
          type: number
          example: 3215421
        type:
          type: string
          example: video/mp4
        video_id:
          type: string
          readOnly: true
          example: 5ed5a9d87ec7d6351b6a90e2
        user_id:
          type: string
          readOnly: true
          example: testuser
        url:
          type: string
          readOnly: true
          example: https://storage.googleapis.com/chotuve-grupo8.appspot.com/uploads/videos/test/1282154_Lathe%20-%204412.mp4.mp4
        thumb:
          type: string
          readOnly: true
          example: https://storage.googleapis.com/chotuve-grupo8.appspot.com/uploads/videos/test/1282154_Lathe%20-%204412.mp4.mp4
    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          example: -58.416572
        longitude:
          type: number
          example: -34.6024161
    OK:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          readOnly: true
        message:
          type: string
          readOnly: true
        data:
          type: object
          readOnly: true
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          readOnly: true
        message:
          type: string
          readOnly: true
        data:
          type: object
          readOnly: true
security:
  - AuthToken: []