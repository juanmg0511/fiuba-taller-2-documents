openapi: "3.0.0"
info:
  title: Chotuve API Reference
  version: 1.0.0
servers:
  - url: https://choutuve-app-server.herokuapp.com/
    description: App Server
paths:
  /ping:
    get:
      summary: Server status
      operationId: ping
      tags:
        - ping
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
  /auth:
    post:
      summary: Autenticate user
      operationId: authUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUser'  
      responses:
        '200':
          description: Auth Token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /users:
    get:
      summary: List users
      operationId: getUsers
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of users
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create user
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  
      responses:
        '201':
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          links:
            GetUserByUserId:
              operationId: getUser
              parameters:
                userId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `GET /users/{userId}`.
            UpdateUserByUserId:
              operationId: putUser
              parameters:
                userId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `PUT /users/{userId}`. 
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /users/{userId}:
    get:
      summary: Get user
      operationId: getUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    put:
      summary: Update user
      operationId: putUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User' 
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /friendrequests:
    get:
      summary: List friend requests
      operationId: getFriendRequests
      tags:
        - friendrequests
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A paged array of friend requests
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/FriendRequests"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create friend request
      operationId: createFriendRequest
      tags:
        - friendrequests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequest'  
      responses:
        '201':
          description: Friend request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendRequest"
          links:
            GetFriendRequestById:
              operationId: getFriendRequests
              parameters:
                friendRequestId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `friendRequestId` parameter in `GET /friendrequests/{friendRequestId}`.
            UpdateFriendRequestById:
              operationId: putFriendRequest
              parameters:
                friendRequestId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `friendRequestId` parameter in `PUT /friendrequests/{friendRequestId}`. 
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /friendrequests/{friendRequestId}:
    get:
      summary: Get friend request
      operationId: getFriendRequest
      tags:
        - friendrequests
      parameters:
        - name: friendRequestId
          in: path
          required: true
          description: The id of the friend request to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Friend request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendRequest"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
    put:
      summary: Update friend request
      operationId: putFriendRequest
      tags:
        - friendrequests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequest' 
      parameters:
        - name: friendRequestId
          in: path
          required: true
          description: The id of the friend request to update
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendRequest"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
components:
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  responses:
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: 5XX Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    AuthUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    AuthToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    User:
      type: object
      required:
        - username
        - first_name
        - last_name
        - contact
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
        last_name:
          type: string
        contact:
          $ref: '#/components/schemas/ContactInfo'
        avatar:
          $ref: '#/components/schemas/Picture'
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Picture:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        url:
          type: string
    ContactInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        phone:
          type: string
    FriendRequest:
      type: object
      required:
        - from
        - to
        - message
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        from:
          type: integer
          format: int64
          readOnly: true
        to:
          type: integer
          format: int64
          readOnly: true
        message:
          type: string
        status:
          type: string
        date_created:
          type: string
          format: date-time
          readOnly: true
        date_updated:
          type: string
          format: date-time
          readOnly: true
    FriendRequests:
      type: array
      items:
        $ref: "#/components/schemas/FriendRequest"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
